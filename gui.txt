import hashlib
import sqlite3
import json
import os
from pathlib import Path
import librosa
import tensorflow as tf
import pickle
from sklearn.preprocessing import StandardScaler
import traceback
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Create database directory if it doesn't exist
if not os.path.exists("data"):
    os.makedirs("data")

# Initialize database
def init_db():
    conn = sqlite3.connect('data/users.db')
    c = conn.cursor()
    c.execute('''
    CREATE TABLE IF NOT EXISTS users
    (id INTEGER PRIMARY KEY, 
    username TEXT UNIQUE, 
    password TEXT,
    history TEXT)
    ''')
    conn.commit()
    conn.close()

def hash_password(password):
    """Hash a password for storing."""
    return hashlib.sha256(str.encode(password)).hexdigest()

def verify_password(stored_password, provided_password):
    """Verify a stored password against one provided by user"""
    return stored_password == hashlib.sha256(str.encode(provided_password)).hexdigest()

def add_user(username, password):
    """Add a user to the database"""
    conn = sqlite3.connect('data/users.db')
    c = conn.cursor()
    try:
        hashed_password = hash_password(password)
        c.execute("INSERT INTO users (username, password, history) VALUES (?, ?, ?)", 
                  (username, hashed_password, json.dumps([])))
        conn.commit()
        result = True
    except sqlite3.IntegrityError:
        result = False
    finally:
        conn.close()
    return result

def authenticate_user(username, password):
    """Check if username/password combination is valid"""
    conn = sqlite3.connect('data/users.db')
    c = conn.cursor()
    c.execute("SELECT password FROM users WHERE username = ?", (username,))
    result = c.fetchone()
    conn.close()
    
    if result is not None:
        return verify_password(result[0], password)
    return False

def add_to_history(username, entry):
    """Add an analysis to user history"""
    conn = sqlite3.connect('data/users.db')
    c = conn.cursor()
    
    # Get current history
    c.execute("SELECT history FROM users WHERE username = ?", (username,))
    history_json = c.fetchone()[0]
    history = json.loads(history_json)
    
    # Add new entry
    history.append(entry)
    
    # Keep only last 10 entries
    if len(history) > 10:
        history = history[-10:]
    
    # Update history
    c.execute("UPDATE users SET history = ? WHERE username = ?", 
              (json.dumps(history), username))
    conn.commit()
    conn.close()

def get_history(username):
    """Get user's analysis history"""
    conn = sqlite3.connect('data/users.db')
    c = conn.cursor()
    c.execute("SELECT history FROM users WHERE username = ?", (username,))
    history_json = c.fetchone()[0]
    conn.close()
    return json.loads(history_json)

class EmotionAnalyzer:
    """Deep learning based emotion analyzer"""
    def __init__(self, model_path, tokenizer_path, encoder_path, max_len_path):
        # Load model
        try:
            self.model = tf.keras.models.load_model(model_path)
            # Load tokenizer
            with open(tokenizer_path, 'rb') as handle:
                self.tokenizer = pickle.load(handle)
            # Load label encoder
            with open(encoder_path, 'rb') as handle:
                self.label_encoder = pickle.load(handle)
            # Load max_len
            with open(max_len_path, 'r') as f:
                self.max_len = int(f.read())
                
            self.model_loaded = True
            print("ML model and components loaded successfully.")
        except Exception as e:
            self.model_loaded = False
            print(f"Error loading ML model: {str(e)}")
            # Fall back to a simple model if trained model can't be loaded
            self._init_fallback_model()

def get_emotion_color(emotion):
    """Get color for an emotion with better readability"""
    emotion_colors = {
        "neutral": "#D3D3D3",  # Light gray
        "joy": "#FFEAA7",      # Lighter yellow
        "sadness": "#A9D6F5",  # Lighter blue
        "fear": "#D8BFD8",     # Lighter purple
        "surprise": "#FFD580", # Lighter orange
        "anger": "#FFC0CB",    # Pink instead of dark red
        "shame": "#D2B48C",    # Lighter brown
        "disgust": "#98FB98",  # Lighter green
        "happy": "#FF91CB",    # pink
        "sad": "#103EBD",      # dark blue
        "angry": "#E74C3C",    # red
        "pleasant": "#F39C12", # orange
    }
    return emotion_colors.get(emotion, "#D3D3D3")

def set_page_config():
    """Configure the Streamlit page"""
    st.set_page_config(
        page_title="Emotion Analysis System",
        page_icon="😊",
        layout="wide",
        initial_sidebar_state="expanded"
    )

    # CSS for full page light blue background
    st.markdown("""
    <style>
    /* Full page background */
    .stApp {
        background-color: #F0F4F8;
    }
    
    /* Make all containers transparent to show background */
    .css-1d391kg, .css-1lcbmhc, .css-18e3th9,
    .css-1r6slb0, .css-12oz5g7, .css-1oe6wy4,
    .css-6qob1r, .css-18ni7ap, .css-k1vhr4 {
        background-color: transparent !important;
    }
    
    /* Sidebar style */
    section[data-testid="stSidebar"] {
        background-color: #E2E8F0 !important;
        border-right: 1px solid #CBD5E0;
    }
    
    /* Header background */
    .header-style {
        background-color: #1E3A8A;
        padding: 1.5rem; 
        border-radius: 10px; 
        margin-bottom: 2rem; 
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    /* Content containers */
    .content-box {
        background-color: white;
        border-radius: 10px;
        padding: 1.5rem;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        margin-bottom: 1.5rem;
    }
    
    /* Main text styles */
    .main-header {
        color: white; 
        text-align: center; 
        font-size: 2.5rem; 
        margin: 0;
    }
    
    .sub-header {
        color: #E0E7FF; 
        text-align: center; 
        margin-top: 0.5rem;
    }
    </style>
    """, unsafe_allow_html=True)

def login_page():
    """Display a standard login page with visually distinct input fields and header"""
    # Title with dark blue color
    st.markdown('<h1 style="color: #1E3A8A; text-align: center; font-size: 3.2rem; margin-bottom: 1.7rem;">Emotion Analysis System</h1>', unsafe_allow_html=True)
    st.markdown('<p style="text-align:center; color:#64748B; font-size:1.1rem; margin-bottom:2rem;">Detect and analyze emotions in text and audio</p>', unsafe_allow_html=True)
    
    # Check if registration was successful
    if 'register_success' in st.session_state and st.session_state['register_success']:
        st.success("Account created successfully!")
        st.session_state['register_success'] = False
    
    # Check if we should show registration or login
    if 'show_register' not in st.session_state:
        st.session_state['show_register'] = False
    
    # Add custom CSS for visually distinct text fields with proper eye icon alignment
    st.markdown("""
    <style>
    /* Main container styling */
    .login-container {
        max-width: 360px;
        margin: 0 auto;
        padding: 20px;
    }
    
    /* Form title */
    .login-title {
        color: #1E3A8A;
        font-size: 22px;
        text-align: center;
        margin-bottom: 20px;
        font-weight: bold;
    }
    
    /* Emoji bar */
    .emoji-bar {
        font-size: 30px;
        text-align: center;
        margin-bottom: 20px;
    }
    
    /* Make input fields clearly visible */
    .stTextInput input {
        background-color: white !important;
        border: 1px solid #CBD5E0 !important;
        border-radius: 5px !important;
        padding: 10px 12px !important;
        color: #1F2937 !important;
        font-size: 15px !important;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05) !important;
        height: 42px !important;
    }
    
    /* Add focus highlighting */
    .stTextInput input:focus {
        border-color: #3B82F6 !important;
        box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.3) !important;
    }
    
    /* Fix for password field with eye icon */
    .stTextInput div[data-baseweb="input"] {
        max-width: 320px !important;
        margin: 0 auto !important;
        background-color: white !important;
        border-radius: 5px !important;
    }
    
    /* Password visibility toggle position fix */
    .stTextInput div[data-baseweb="input"] > div:last-child {
        position: absolute !important;
        right: 0 !important;
        height: 42px !important;
        display: flex !important;
        align-items: center !important;
        padding-right: 10px !important;
    }
    
    /* Make placeholder text visible */
    .stTextInput input::placeholder {
        color: #9CA3AF !important;
        opacity: 1 !important;
    }
    
    /* Button styling */
    .stButton > button {
        background-color: #1E3A8A !important;
        color: white !important;
        max-width: 320px !important;
        height: 42px !important;
        font-size: 15px !important;
        font-weight: 600 !important;
        transition: all 0.2s !important;
        margin-top: 15px;
    }
    
    .stButton > button:hover {
        background-color: #1E40AF !important;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1) !important;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Simple emoji row with basic styling
    st.markdown('<div class="emoji-bar">😊 😢 😡 😲 😨 🤢 😳</div>', unsafe_allow_html=True)
    
    # Centered container
    col1, col2, col3 = st.columns([1, 1.5, 1])
    
    with col2:
        if not st.session_state['show_register']:
            # Login Form
            st.markdown('<div class="login-title">Sign In</div>', unsafe_allow_html=True)
            username = st.text_input("Username", key="login_username", placeholder="Enter your username")
            password = st.text_input("Password", type="password", key="login_password", placeholder="Enter your password")
            
            col_btn1, col_btn2 = st.columns([1, 1], gap="small")
            with col_btn1:
                if st.button("Sign In", key="signin_button", use_container_width=True):
                    if username and password:
                        if authenticate_user(username, password):
                            st.session_state['logged_in'] = True
                            st.session_state['username'] = username
                            st.session_state['show_welcome'] = True
                            st.rerun()
                        else:
                            st.error("Invalid username or password")
                    else:
                        st.warning("Please enter credentials")
            
            with col_btn2:
                if st.button("Create Account", key="create_account_button", use_container_width=True):
                    st.session_state['show_register'] = True
                    st.rerun()
        
        else:
            # Registration Form
            st.markdown('<div class="login-title">Create Account</div>', unsafe_allow_html=True)
            new_username = st.text_input("Username", key="register_username", placeholder="Choose a username")
            new_password = st.text_input("Password", type="password", key="register_password", placeholder="Create a password")
            confirm_password = st.text_input("Confirm Password", type="password", key="confirm_password", placeholder="Confirm your password")
            
            col_btn1, col_btn2 = st.columns([1, 1], gap="small")
            with col_btn1:
                if st.button("Register", key="register_button", use_container_width=True):
                    if new_username and new_password:
                        import re
                        if re.search(r'[^a-zA-Z0-9]', new_username):
                            st.error("Username must contain only letters & numbers")
                        elif new_username.isdigit():
                            st.error("Username must include letters")
                        elif new_password != confirm_password:
                            st.error("Passwords does not match")
                        elif len(new_password) < 6:
                            st.error("Password must be at least 6 characters long")
                        else:
                            if add_user(new_username, new_password):
                                st.session_state['register_success'] = True
                                st.session_state['show_register'] = False
                                st.rerun()
                            else:
                                st.error("Username already exists")
                    else:
                        st.warning("Please fill in all fields")
            
            with col_btn2:
                if st.button("Back to Login", key="back_button", use_container_width=True):
                    st.session_state['show_register'] = False
                    st.rerun()

def app_sidebar():
    """Display the sidebar navigation"""
    #if 'page' not in st.session_state:
     #  st.session_state.page = "Text Analysis"

    current_page = st.session_state.get("page", "Text Analysis")

    #subtitle_text = "Discover emotions in text"
    if 'current_page' in locals() and current_page == "Audio Analysis":
        subtitle_text = "Discover emotions in audio"
    elif 'current_page' in locals() and current_page == "History":
        subtitle_text = "History"
    elif 'current_page' in locals() and current_page == "About":
        subtitle_text = "About Us"
    else:
        subtitle_text = "Discover emotions in text"

    st.sidebar.markdown("""
    <style>
        .sidebar-title {
            text-align: center;
            padding: 1rem 0;
        }
        .sidebar-title h2 {
            color: #1E3A8A;
            margin-bottom: 0.5rem;
        }
        .sidebar-subtext {
            color: #64748B;
            font-size: 0.9rem;
            margin-top: 0;
            text-align: center;
        }
        .sidebar-divider {
            height: 1px;
            background-color: #E2E8F0;
            margin: 0.5rem 0 1.5rem 0;
        }
    </style>
    """, unsafe_allow_html=True)

    # Display title and styled subtitle in sidebar
    st.sidebar.markdown(f"""
    <div class="sidebar-title">
        <h2>Emotion Analysis</h2>
        <p class="sidebar-subtext">{subtitle_text}</p>
    </div>
    <div class="sidebar-divider"></div>
    """, unsafe_allow_html=True)
    
    # Add navigation with built-in Streamlit components
    st.sidebar.markdown("<h3 style='color: #475569; font-size: 1rem; margin-bottom: 1rem;'>Navigation</h3>", unsafe_allow_html=True)
    
    # Create navigation using Streamlit's radio component with custom styling
    page = st.sidebar.radio(
        label="",
        options=["Text Analysis", "Audio Analysis", "History", "About"],
        label_visibility="collapsed"
    )

    # Update page in session state if changed
    if page != current_page:
        st.session_state.page = page
        st.rerun()
    
    # Add user info card
    st.sidebar.markdown("<div style='height: 1px; background-color: #E2E8F0; margin: 1.5rem 0;'></div>", unsafe_allow_html=True)
    st.sidebar.markdown(f"""
    <div style="background-color: #F1F5F9; padding: 1rem; border-radius: 0.5rem; margin-top: 1rem;">
        <div style="display: flex; align-items: center;">
            <div style="background-color: #3B82F6; color: white; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; font-size: 1.2rem; margin-right: 0.75rem;">
                {st.session_state['username'][0].upper() if st.session_state['username'] else 'U'}
            </div>
            <div>
                <p style="margin: 0; font-size: 0.9rem; color: #475569;">Logged in as:</p>
                <p style="margin: 0; font-weight: bold; color: #1E3A8A;">{st.session_state['username']}</p>
            </div>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Add logout button with proper session state cleanup
    if st.sidebar.button("Logout", type="primary"):
        # Clear all relevant session states
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        # Initialize required session states
        st.session_state['logged_in'] = False
        st.session_state['username'] = None
        st.session_state['show_register'] = False
        st.rerun()
    
    # Add version information at the bottom
    st.sidebar.markdown("""
    <div style="text-align: center; padding-top: 2rem; color: #94A3B8; font-size: 0.8rem;">
        <p style="margin: 0;">Emotion Analysis System v2.0</p>
        <p style="margin: 0;">© 2025 Sandra & Hui Lin</p>
    </div>
    """, unsafe_allow_html=True)
    
    return page

# Audio Part
emotion_color = {
    "happy": "#FF91CB", #pink
    "sad": "#103EBD", #dark blue
    "angry": "#E74C3C", #red
    "fear" : "#8E44AD", #purple
    "pleasant": "#F39C12", #orange
    "disgust" : "#27AE60", #green
    "neutral" : "#95A5A6",   #grey
    "joy": "#FFEAA7",      # Lighter yellow
    "sadness": "#A9D6F5",  # Lighter blue 
    "anger": "#FFC0CB",    # Pink instead of dark red
    "surprise": "#FFD580", # Lighter orange
    "shame": "#D2B48C"     # Lighter brown
}

emotion_emoji = {
    "happy": "😄",
    "sad": "😢",
    "angry": "😠",
    "fear": "😨",
    "pleasant": "😊",
    "disgust": "🤢",
    "neutral": "😐",
    "joy": "😊",
    "sadness": "😢",
    "anger": "😡",
    "surprise": "😲",
    "shame": "😳"
}

def audio_analysis_page():
    """Display the audio analysis page"""
    st.markdown("""
    <div class="header-style">
        <h1 class="main-header">Audio Emotion Analysis</h1>
        <p class="sub-header">Detect emotional tone in audio recoding</p>
    </div>
    """, unsafe_allow_html=True)
    
    def log_error(e):
        st.error("An error occurred:")
        st.error(str(e))
        st.error("Detailed error trace:")
        st.error(traceback.format_exc())
    
    def check_files():
        project_path = "C:/Users/esther/OneDrive - Tunku Abdul Rahman University College/FYP/Final 2/Emotion Detection Text Sentiment Analysis Final"
        os.chdir(project_path)
        required_files = [
            os.path.join(project_path, 'audio_sentiment_model.keras'),
            os.path.join(project_path, 'encoder_label.pkl'),
            os.path.join(project_path, 'scaler_data.pkl')
        ]
        missing_files = []
        
        for file in required_files:
            if not os.path.exists(file):
                missing_files.append(file)
        
        return missing_files

    def add_noise(data):
        noise_value = 0.015 * np.random.uniform() * np.amax(data)
        data = data + noise_value * np.random.normal(size=data.shape[0])
        return data

    def stretch_process(data, rate=0.8):
        return librosa.effects.time_stretch(y=data, rate=rate)

    def pitch_process(data, sampling_rate, pitch_factor=0.7):
        return librosa.effects.pitch_shift(y=data, sr=sampling_rate, n_steps=pitch_factor)

    def extract_process(data, sample_rate):
        output_result = np.array([])

        mean_zero = np.mean(librosa.feature.zero_crossing_rate(y=data).T, axis=0)
        output_result = np.hstack((output_result, mean_zero))

        stft_out = np.abs(librosa.stft(data))
        chroma_stft = np.mean(librosa.feature.chroma_stft(S=stft_out, sr=sample_rate).T, axis=0)
        output_result = np.hstack((output_result, chroma_stft))

        mfcc_out = np.mean(librosa.feature.mfcc(y=data, sr=sample_rate).T, axis=0)
        output_result = np.hstack((output_result, mfcc_out))

        root_mean_out = np.mean(librosa.feature.rms(y=data).T, axis=0)
        output_result = np.hstack((output_result, root_mean_out))

        mel_spectrogram = np.mean(librosa.feature.melspectrogram(y=data, sr=sample_rate).T, axis=0)
        output_result = np.hstack([output_result, mel_spectrogram])

        return output_result
    
    def export_process(audio_data, sample_rate):
        output_1 = extract_process(audio_data, sample_rate)
        result = np.array(output_1)

        noise_out = add_noise(audio_data)
        output_2 = extract_process(noise_out, sample_rate)
        result = np.vstack((result, output_2))

        new_out = stretch_process(audio_data)
        stretch_pitch = pitch_process(new_out, sample_rate)
        output_3 = extract_process(stretch_pitch, sample_rate)
        result = np.vstack((result, output_3))

        return result
    
    def reshape_to_fixed_size(data, target_features=704):
        if data.shape[1] > target_features:
            return data[:, :target_features]
        elif data.shape[1] < target_features:
            pad_width = ((0, 0), (0, target_features - data.shape[1]))
            return np.pad(data, pad_width, mode='constant')
        return data
    
    def predict_emotion(audio_path):
        try:
            # Define data directories
            project_path = "C:/Users/esther/OneDrive - Tunku Abdul Rahman University College/FYP/Final 2/Emotion Detection Text Sentiment Analysis Final"
            if not os.path.exists(project_path):
                st.error(f"Project path not found: {project_path}")
                return None, None, None    
            
            # Load model and encoder
            if os.path.exists(os.path.join(project_path,'audio_sentiment_model.keras')):
                loaded_model = tf.keras.models.load_model(os.path.join(project_path,'audio_sentiment_model.keras'))
            else:
                st.error("Audio sentiment model not found. Please ensure files are in the correct location.")
                return None, None, None
                
            if os.path.exists(os.path.join(project_path,'encoder_label.pkl')):
                with open(os.path.join(project_path,'encoder_label.pkl'), 'rb') as f:
                    loaded_encoder = pickle.load(f)
            else:
                st.error("Encoder label file not found. Please ensure files are in the correct location.")
                return None, None, None

            # Load audio and extract features
            data, sample_rate = librosa.load(audio_path, duration=2.5, offset=0.6)
            features = export_process(data, sample_rate)

            # Load scaler and normalize features
            scaler_path = os.path.join(project_path, 'scaler_data.pkl')
            if os.path.exists(scaler_path):
                with open(scaler_path, 'rb') as f:
                    scaler_data = pickle.load(f)
                features = scaler_data.transform(features)
            else:
                st.warning("Scaler file not found! Using a new scaler which may cause prediction errors.")
                scaler_data = StandardScaler()
                features = scaler_data.fit_transform(features)

            features = reshape_to_fixed_size(features)
            features = features.reshape(features.shape[0], features.shape[1], 1)

            # Make prediction
            predictions = loaded_model.predict(features)
            predicted_indices = np.argmax(predictions, axis=1)
            predicted_emotion = loaded_encoder.inverse_transform(predicted_indices)
            confidence_scores = np.max(predictions, axis=1)
            emotion = predicted_emotion[0]
            emotion_classes = loaded_encoder.classes_
            all_confidence_scores = predictions[0]
            
            return emotion, all_confidence_scores, emotion_classes
        
        except Exception as e:
            log_error(e)
            st.error(f"Prediction error: {str(e)}")
            return None, None, None
    
    # Add CSS for audio page
    st.markdown("""
    <style>
    .stFileUploader{
        background-color: #F8F9FA;
        border: 2px dashed #E9ECEF;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
    }
    .emotion-text{
        font-size: 30px;
        font-weight: bold;
        color: var(--emotion-color);
        text-align: center;
        padding: 10px;
        border-radius: 10px;
        margin: 20px 0;
        background-color: rgba(var(--emotion-color-rgb), 0.1);
    }
    .emotion-emoji{
        font-size: 48px;
        text-align: center;
        display: block;
        margin: 10px 0;
    }
    </style>
    """, unsafe_allow_html=True)
    
    #define project path
    project_path = "C:/Users/esther/OneDrive - Tunku Abdul Rahman University College/FYP/Final 2/Emotion Detection Text Sentiment Analysis Final"
    required_files = [
        os.path.join(project_path, 'audio_sentiment_model.keras'),
        os.path.join(project_path, 'encoder_label.pkl'),
        os.path.join(project_path, 'scaler_data.pkl')
    ]

    # Check for required model files
    missing_files = [f for f in required_files if not os.path.exists(f)]
    if missing_files:
        st.warning(f"Some model files are missing: {', '.join([os.path.basename(f) for f in missing_files])}")
        st.info("You need to place the audio model files in the main project folder:")
        st.code("""
        {project_path}/
        ├── audio_sentiment_model.keras
        ├── encoder_label.pkl
        └── scaler_data.pkl
        """)
        
        st.markdown("""
        ### Model Setup Instructions
        
        1. Copy the audio model files to the main project folder
        2. Make sure the filenames match exactly
        3. Restart the application
        """)
    else:
        # Audio uploader section
        st.markdown(f"""
        <h3 style="font-size: 2rem; font-weight: bold; color: #1E3A8A;">Upload Audio for Analysis</h3>
        """, unsafe_allow_html=True)     

        audio_file = st.file_uploader("Upload an audio file", type=["wav", "mp3"], key = "unique_audio_uploader")
                
        # Process uploaded file if available
        if audio_file is not None:
            # Save uploaded file temporarily
            with open("temp_uploaded_audio.wav", "wb") as f:
                f.write(audio_file.getbuffer())
            
            # Display audio player
            st.audio(audio_file, format="audio/wav")
            
            # Analyze button for uploaded audio
            if st.button("Analyze Audio"):
                with st.spinner("Analyzing your audio file..."):
                    emotion, confidence_scores, emotion_classes = predict_emotion("temp_uploaded_audio.wav")
                    display_audio_results(emotion, confidence_scores, emotion_classes, emotion_color)
    
    st.markdown('</div>', unsafe_allow_html=True)

def hex_to_rgb(hex_color):
    """Convert hex color to RGB for CSS variable"""
    hex_color = hex_color.lstrip('#')
    return ','.join(str(int(hex_color[i:i+2], 16)) for i in (0,2,4))

def display_audio_results(emotion, confidence_scores, emotion_classes, emotion_color):
    """Helper function to display audio analysis results"""
    if emotion is not None:
        
        emotion = "neutral" if emotion.lower() == "neutral" else emotion.lower()
        color = emotion_color.get(emotion.lower(), "#000000")
        rgb_color = hex_to_rgb(color)
        emoji = emotion_emoji.get(emotion.lower(), "❓")

        #save audio analysis history
        try:
            confidence_value = float(np.max(confidence_scores)) if confidence_scores is not None else 0.0
            history_entry = {
                'text': f"[AUDIO ANALYSIS] Detected emotion: {emotion.upper()}",
                'emotion': emotion,
                'confidence': confidence_value,
                'timestamp': datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'is_audio': True,
                'emotion_color': color  
            }
            # Save to user history
            add_to_history(st.session_state['username'], history_entry)
            st.success("Analysis saved to history!")
        except Exception as e:
            st.warning(f"Could not save to history: {str(e)}")

        st.markdown(f"""
        <style>
        :root {{
            --emotion-color: {color};
            --emotion-color-rgb: {rgb_color};
        }}
        </style>
        <div class="emotion-emoji">{emoji}</div>
        <div class="emotion-text">Predicted Emotion: {emotion.upper()}</div>
        """, unsafe_allow_html=True)
        
        # Display emotion confidence chart
        if emotion_classes is not None and confidence_scores is not None:
            st.subheader("Emotion Confidence Scores")
            fig, ax = plt.subplots(figsize=(10, 5))
            
            # Create bars with colors
            colors = [emotion_color.get(emotion.lower(), "#666666") for emotion in emotion_classes]
            ax.bar(emotion_classes, confidence_scores, color=colors)
            
            # Customize chart
            ax.set_xlabel('Emotion')
            ax.set_ylabel('Confidence')
            plt.xticks(rotation=45)
            plt.tight_layout()
            
            # Display chart
            st.pyplot(fig)
            
            # Add a description of what the results mean
            st.markdown("""
            ### Understanding the Results
            
            The chart above shows the confidence scores for each emotion detected in your audio. 
            The higher the bar, the more confident the system is that this emotion is present.
            
            Audio emotion detection can be affected by:
            - Voice tone and pitch
            - Speaking speed
            - Background noise
            - Audio quality
            
            For best results, use clear audio recordings in a quiet environment.
            """)
        
        st.markdown('</div>', unsafe_allow_html=True)
    else:
        st.error("Unable to analyze the audio. Please try a different file or check if the model files are correctly installed.")

# History
def history_page():
    """Display the history page"""
    st.markdown("""
    <div class="header-style">
        <h1 class="main-header">Analysis History</h1>
        <p class="sub-header">View your past emotion analyses</p>
    </div>
    """, unsafe_allow_html=True)
    
    history = get_history(st.session_state['username'])
    
    if not history:
        st.markdown('<div class="content-box">', unsafe_allow_html=True)
        st.info("No analysis history found. Try analyzing some text first!")
        st.markdown('</div>', unsafe_allow_html=True)
        return
    
    st.markdown('<div class="content-box">', unsafe_allow_html=True)
    st.markdown(f"<h3 style='color: #1E3A8A; margin-bottom: 1rem;'>Your Recent Analysis</h3>", unsafe_allow_html=True)
    st.markdown(f"Showing your last {len(history)} analyses:")
    
    # Create a DataFrame for better display
    history_df = pd.DataFrame(history)
    history_df = history_df.sort_values(by='timestamp', ascending=False)
    
    # Display each history item
    for i, item in history_df.iterrows():
        emotion_color = get_emotion_color(item['emotion'])
        
        with st.expander(f"{item['timestamp']} - {item['emotion'].upper()} ({item['confidence']:.2f})"):
            st.markdown(f"""
            <div style="background-color: {emotion_color}; border-radius: 5px; padding: 0.5rem; margin-bottom: 0.5rem; display: inline-block;">
                <span style="font-weight: bold;">{item['emotion'].upper()}</span> ({item['confidence']:.2f})
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown(f"**Text:** {item['text']}")
            
            # Show model type if available
            if 'model_type' in item:
                st.markdown(f"**Analysis method:** {item['model_type']} model")
            
            # Option to re-analyze
            if st.button(f"Re-analyze", key=f"reanalyze_{i}"):
                st.session_state['text_input'] = item['text']
                st.session_state['page'] = "Text Analysis"
                st.rerun()
    st.markdown('</div>', unsafe_allow_html=True)

# About
def about_page():
    """Display the about page"""
    st.markdown("""
    <div class="header-style">
        <h1 class="main-header">About Emotion Analysis System</h1>
        <p class="sub-header">Understanding the technology behind emotion detection</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown('<div class="content-box">', unsafe_allow_html=True)
    st.markdown("""
    ### Overview
    This Emotion Analysis System uses advanced machine learning techniques to detect emotions in text. 
    The system recognizes multiple emotion categories including joy/happy, sadness/sad, anger/angry, fear, surprise, disgust, and pleasant.
    
    ### Features
    - **ML-Based Text Analysis**: Analyze emotional content in text with high accuracy using a trained deep learning model
    - **Mixed Emotion Detection**: Identifies complex emotional states with multiple feelings
    - **Audio Analysis**: Detect emotions in spoken language
    - **History**: Keep track of your previous analyses
    - **User Accounts**: Secure login system to save your history
    
    ### How it Works
    The system uses a deep learning approach for emotion detection:
    
    1. **Text Preprocessing**: Normalizes text by removing punctuation, converting to lowercase, etc.
    2. **Tokenization**: Converts text into numerical sequences that the model can understand
    3. **Deep Learning Model**: Uses a neural network trained on thousands of emotional text examples
    4. **Mixed Emotion Detection**: Identifies when multiple emotions are present in the same text
    5. **Visualization**: Provides intuitive charts and highlights to understand the emotional content
    
    ### Model Training
    The emotion detection model was trained on a large dataset of labeled emotional texts using:
    - Bidirectional LSTM layers for sequence understanding
    - Word embeddings to capture semantic relationships
    - Regularization techniques to prevent overfitting
    
    ### Privacy
    Your text inputs are processed locally and not shared externally.
    Only the emotion result and text are saved in your history.
    """)
    st.markdown('</div>', unsafe_allow_html=True)


def main():
    """Main application function"""
    set_page_config()
    init_db()
    
    # Initialize session state variables
    if 'logged_in' not in st.session_state:
        st.session_state['logged_in'] = False
    if 'username' not in st.session_state:
        st.session_state['username'] = None
    if 'page' not in st.session_state:
        st.session_state['page'] = "Text Analysis"
    if 'text_input' not in st.session_state:
        st.session_state['text_input'] = ""
    if 'model_loaded' not in st.session_state:
        st.session_state['model_loaded'] = False
    if 'show_welcome' not in st.session_state:
        st.session_state['show_welcome'] = False
    if 'analysis_in_progress' not in st.session_state:
        st.session_state['analysis_in_progress'] = False
    
    # Check login status
    if not st.session_state['logged_in']:
        login_page()
    else:
        # Set the base path to your actual model location
        base_path = "C:/Users/esther/OneDrive - Tunku Abdul Rahman University College/FYP/Final 2/Emotion Detection Text Sentiment Analysis Final"
        
        # Construct full paths to model files
        model_path = f"{base_path}/emotion_detection_model/model.keras"
        tokenizer_path = f"{base_path}/emotion_detection_model/tokenizer.pickle"
        encoder_path = f"{base_path}/emotion_detection_model/label_encoder.pickle"
        max_len_path = f"{base_path}/emotion_detection_model/max_len.txt"
        
        # Only load the model once by checking session state
        if not st.session_state.get('emotion_analyzer'):
            try:
                # Display loading indicator
                with st.spinner("Loading emotion analysis system..."):
                    emotion_analyzer = EmotionAnalyzer(model_path, tokenizer_path, encoder_path, max_len_path)
                    if not emotion_analyzer.model_loaded:
                        # Create a fallback analyzer if needed
                        emotion_analyzer = EmotionAnalyzer(None, None, None, None)
                    # Store in session state so we don't reload every time
                    st.session_state['emotion_analyzer'] = emotion_analyzer
                    st.session_state['model_loaded'] = True
            except Exception as e:
                # Create a fallback analyzer silently
                emotion_analyzer = EmotionAnalyzer(None, None, None, None)
                st.session_state['emotion_analyzer'] = emotion_analyzer
        else:
            # Use the already loaded analyzer
            emotion_analyzer = st.session_state['emotion_analyzer']
        
        # Get page from sidebar
        page = app_sidebar()
        st.session_state['page'] = page
        
        # Display selected page
        if page == "Text Analysis":
            text_analysis_page(emotion_analyzer)
        elif page == "Audio Analysis":
            audio_analysis_page()
        elif page == "History":
            history_page()
        elif page == "About":
            about_page()


if __name__ == "__main__":
    main()